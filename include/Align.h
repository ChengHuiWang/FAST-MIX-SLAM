#ifndef MIX_ALIGN_H_
#define MIX_ALIGN_H_

#include "Common.h"

// 有关align部分的算法
// This part is moved from rpg_SVO with modification to support mix 

namespace mix {

    /**
     * @brief align a pixel with reference image patch
     * @param[in] cur_img The current image
     * @param[in] ref_patch_with_boarder the patch with boarder, used to compute the gradient (or FEJ)
     * @param[in] ref_patch the patch in reference frame, by default is 64x64
     * @param[in] n_iter maximum iterations
     * @param[out] cur_px_estimate the estimated position in current image, must have an initial value
     * @return True if successful
     */
    bool Align2D(
            const cv::Mat &cur_img,
            uint8_t *ref_patch_with_border,
            uint8_t *ref_patch,
            const int n_iter,
            Vector2f &cur_px_estimate,
	   float *ExposureTime_A ,            //曝光时间
	   int ReferForAlignID ,
           int nimg_A  ,
           bool no_simd = false
);
//特征对齐的参考帧----------------------------------------------------------------
    	//double ResponseInverse[256] = { 0.00841609, 0.0117425, 0.0163715, 0.0227062, 0.0307793, 0.0420908, 0.0563273, 0.0702391, 0.081858, 0.0902191, 0.0969666, 0.103887, 0.111077, 0.1186, 0.126433, 0.134387, 0.142256, 0.149642, 0.156204, 0.161906, 0.167166, 0.172786, 0.179228, 0.186216, 0.193467, 0.200874, 0.208582, 0.216773, 0.225713, 0.234566, 0.242634, 0.250073, 0.256985, 0.263367, 0.269571, 0.275992, 0.282901, 0.290243, 0.297663, 0.305391, 0.31357, 0.321669, 0.329327, 0.336768, 0.344082, 0.351355, 0.358622, 0.36618, 0.374049, 0.382255, 0.390415, 0.398601, 0.406658, 0.414845, 0.423155, 0.431489, 0.439401, 0.447226, 0.455077, 0.463002, 0.470814, 0.478383, 0.485407, 0.491809, 0.497933, 0.504507, 0.511623, 0.5189, 0.52608, 0.533122, 0.540422, 0.54801, 0.555832, 0.564024, 0.572326, 0.580513, 0.588727, 0.597008, 0.605427, 0.613834, 0.621943, 0.629932, 0.637915, 0.645967, 0.653575, 0.661065, 0.668539, 0.676072, 0.683802, 0.691179, 0.698171, 0.704728, 0.710978, 0.717589, 0.724899, 0.733345, 0.743074, 0.753592, 0.764423, 0.774916, 0.784384, 0.792826, 0.800573, 0.808106, 0.815808, 0.823578, 0.831077, 0.838145, 0.844756, 0.851041, 0.856816, 0.861678, 0.866557, 0.871526, 0.877287, 0.883689, 0.890928, 0.899015, 0.907877, 0.917444, 0.927336, 0.937155, 0.946747, 0.956209, 0.965703, 0.975399, 0.984787, 0.99401, 1.00274, 1.01078, 1.01799, 1.02442, 1.03046, 1.03619, 1.04179, 1.04796, 1.05506, 1.06315, 1.07207, 1.0815, 1.09109, 1.1005, 1.1094, 1.11761, 1.12522, 1.13256, 1.13996, 1.14729, 1.15454, 1.16158, 1.16827, 1.17474, 1.18114, 1.18763, 1.19451, 1.20198, 1.21009, 1.21853, 1.22692, 1.23553, 1.24383, 1.2513, 1.2583, 1.26541, 1.27342, 1.2825, 1.29273, 1.30334, 1.31355, 1.32308, 1.33116, 1.33847, 1.34534, 1.35162, 1.35714, 1.36176, 1.36559, 1.36979, 1.37509, 1.38203, 1.39075, 1.4014, 1.41422, 1.42784, 1.44088, 1.45246, 1.46233, 1.47059, 1.47682, 1.48165, 1.48558, 1.48914, 1.493, 1.49704, 1.50163, 1.50692, 1.51283, 1.51947, 1.52713, 1.5357, 1.54509, 1.5548, 1.56454, 1.57418, 1.58342, 1.59201, 1.59955, 1.60669, 1.61394, 1.62142, 1.62908, 1.63679, 1.64437, 1.65204, 1.66015, 1.66841, 1.67663, 1.68477, 1.69215, 1.69909, 1.70621, 1.71386, 1.722, 1.7307, 1.74008, 1.74976, 1.75899, 1.768, 1.77664, 1.78581, 1.79608, 1.8064, 1.81622, 1.8249, 1.83224, 1.83846, 1.84392, 1.84864, 1.85313, 1.85804, 1.86336, 1.86959, 1.87686, 1.88501, 1.89281, 1.89978, 1.90533, 1.91059, 1.91702, 1.92686, 1.94244, 1.96731, 2.00689, 2.06997, 2.16496, 2.30425 };
       // int ReferForAlignID = 0;
        //float *ExposureTime_A;              //曝光时间
       // int nimg_A = 0;
        double ResponseFunction_A(double x);
	//double getExposureTime_A(float *);
	//double getNImage_A(int ); 
	//double getReferForAlignID(int ); 
//-----------------------------------------------------------------------------------------
}

#endif